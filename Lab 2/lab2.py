import math  # Імпортуємо модуль math для використання π (pi)

# === SRP (Single Responsibility Principle):
# Клас Circle відповідає тільки за коло: зберігає радіус і рахує площу.
class Circle:
    def __init__(self, radius):  # Конструктор приймає радіус
        self.radius = radius  # Зберігаємо радіус

    def area(self):  # Метод для обчислення площі кола
        return math.pi * self.radius ** 2  # Формула площі: π * r^2


# === SRP: Клас Square відповідає лише за квадрат (зберігання сторони + обчислення площі)
class Square:
    def __init__(self, side):  # Конструктор приймає сторону
        self.side = side  # Зберігаємо сторону

    def area(self):  # Метод для обчислення площі квадрата
        return self.side ** 2  # Формула площі: side^2


# === OCP (Open/Closed Principle):
# Клас ShapeCalculator відкритий для розширення — можна додавати нові фігури з методом area(),
# але закритий для модифікації — сам клас змінювати не потрібно.
class ShapeCalculator:
    def __init__(self, shapes):  # Приймає список фігур
        self.shapes = shapes  # Зберігає список

    def total_area(self):  # Обчислює сумарну площу
        return sum(shape.area() for shape in self.shapes)  # Працює з будь-яким об'єктом, що має метод area()


# Основна функція — консольна взаємодія з користувачем
def main():
    shapes = []  # Список фігур, які ввів користувач

    while True:  # Нескінченний цикл меню
        # Меню дій
        print("\n1. Додати коло")
        print("2. Додати квадрат")
        print("3. Обчислити загальну площу")
        print("0. Вихід")

        choice = input("Ваш вибір: ")  # Зчитування вибору

        if choice == '1':  # Додавання кола
            r = float(input("Введіть радіус: "))  # Зчитуємо радіус
            shapes.append(Circle(r))  # Додаємо об'єкт Circle до списку
        elif choice == '2':  # Додавання квадрата
            s = float(input("Введіть довжину сторони квадрата: "))  # Зчитуємо сторону
            shapes.append(Square(s))  # Додаємо об'єкт Square до списку
        elif choice == '3':  # Обчислення загальної площі
            calculator = ShapeCalculator(shapes)  # Створюємо калькулятор
            print("Загальна площа:", calculator.total_area())  # Виводимо результат
        elif choice == '0':  # Вихід з програми
            break  # Перериваємо цикл
        else:
            print("Невідомий вибір!")  # Якщо вибір некоректний

# Запуск функції main, якщо файл виконується напряму
if __name__ == "__main__":
    main()

#Принципи SOLID — це п’ять основних правил об’єктно-орієнтованого програмування,
#  які допомагають писати зрозумілий, гнучкий і масштабований код.
#  Вони особливо корисні при розробці великих систем, де важливо, щоб зміни в одній частині коду не ламали інші частини.